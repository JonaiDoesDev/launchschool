What is the return value of reject in the following code? Why?

[1, 2, 3].reject do |num|
  puts num
end

So lets look at the ruby docs...

Returns a new Array whose elements are all those from self for which the block returns false or nil

Based on this it seems that this does the opposite of count in terms of evaluating for false(or nil) rather than true. Also it returns an array itself. A NEW ARRAY.

Example:

a = [:foo, 'bar', 2, 'bat']
a1 = a.reject {|element| element.to_s.start_with?('b') }
a1 # => [:foo, 2]

Returns a new enumerator if no block is given

Example:

a = [:foo, 'bar', 2]
a.reject # => #<Enumerator: [:foo, "bar", 2]:reject>

To answer the question, I believe it will return an empty array since a block is given and intergers evaluate to truthy.


I WAS WRONG 

although my workthrough/thinking was sound. I forgot about 'puts'

"Since puts always returns nil, you might think that no values would be selected and an empty array would be returned. The important thing to be aware of here is how reject treats the return value of the block. reject returns a new array containing items where the block's return value is "falsey". In other words, if the return value was false or nil the element would be selected."
